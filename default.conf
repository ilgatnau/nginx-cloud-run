# set search paths for pure Lua external libraries (';;' is the default path):
 lua_package_path '/etc/nginx/?.lua;;';

 # set search paths for Lua external libraries written in C (can also use ';;'):
 # lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so;;';

 resolver 169.254.169.254;

server {
    listen 8080;
    large_client_header_buffers 4 16k;

    location /lua_content {
         # MIME type determined by default_type:
       
         default_type 'text/plain';

         content_by_lua_block {
            ngx.say('Hello,world!')
         }
     }

     location /run {
         access_by_lua_block {

            local session = require "resty.session".open()
            if session.data.token == nil then
                local http = require "resty.http"
                local httpc = http.new()

                local res, err = httpc:request_uri("http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=httpbin-public-aruznp6o4a-uc.a.run.app", { 
                    method = "GET",
                    headers = {
                        ["Metadata-Flavor"] = "Google",
                    }
                })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    return
                end
                
                session.data.token = "" .. res.body
                session.data.token_time = ngx.now()
                session:save()

                ngx.header['Set-Cookie'] = 'auth_cookie=' .. res.body .. '; path=/'
            end

            ngx.req.set_header("Authorization", "Bearer " .. session.data.token)
            ngx.req.set_header("Authorization-time", "" .. session.data.token_time)
         }

         proxy_pass https://httpbin-public-aruznp6o4a-uc.a.run.app/headers;
     }

     location /run_private {
         access_by_lua_block {

            local session = require "resty.session".open()
            if session.data.token == nil or session.data.token == '' then
                ngx.req.set_header("session_token_nil", "true")
                local http = require "resty.http"
                local httpc = http.new()

                local res, err = httpc:request_uri("http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=httpbin-private-aruznp6o4a-ew.a.run.app", { 
                    method = "GET",
                    headers = {
                        ["Metadata-Flavor"] = "Google",
                    }
                })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    return
                end
                
                session.data.token = "" .. res.body
                session:save()
            end

            ngx.req.set_header("Authorization", "Bearer " .. session.data.token)

            local cookie_value = ngx.var.cookie_Auth
            if cookie_value == nil or cookie_value == '' then
                ngx.header['Set-Cookie'] = 'auth=' .. session.data.token
                ngx.req.set_header("session_cookie_nil", "true")
            end
         }

         proxy_pass https://httpbin-private-aruznp6o4a-ew.a.run.app/headers;
     }

     location /test {

         access_by_lua_block {

            local session = require "resty.session".open()
            if session.data.token == nil then
                session.data.token = "test_session"
                session:save()
            end

            local cookie_value = ngx.var.cookie_Test
            if cookie_value == nil or cookie_value == '' then 
                ngx.header['Set-Cookie'] = 'test=ok; path=/'
                ngx.req.set_header("Authorization", "Bearer ZHVtbXkK")
                ngx.req.set_header("session_cookie_nil", "true")
            end

            ngx.req.set_header("session_header", "value " .. session.data.token)
            ngx.req.set_header("session_header2", "dummy")
         }
         
         proxy_pass https://httpbin-public-aruznp6o4a-uc.a.run.app/headers;
     }


}
