# set search paths for pure Lua external libraries (';;' is the default path):
 lua_package_path '/etc/nginx/?.lua;;';

 # set search paths for Lua external libraries written in C (can also use ';;'):
 # lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so;;';

 resolver 169.254.169.254;

 lua_shared_dict sessions 10m;

server {
    listen 8080;
    large_client_header_buffers 4 16k;

    -- setting redis as storage adapter, see https://github.com/bungle/lua-resty-session#pluggable-storage-adapters
    set $session_storage redis;

    -- Set of options to pass to the session storage adapter
    set $session_redis_prefix                   sessions;
    set $session_redis_database                 0;
    set $session_redis_connect_timeout          1000; # (in milliseconds)
    set $session_redis_send_timeout             1000; # (in milliseconds)
    set $session_redis_read_timeout             1000; # (in milliseconds)
    set $session_redis_socket                   unix:///var/run/redis/redis.sock;
    set $session_redis_host                     127.0.0.1;
    set $session_redis_port                     6379;
    set $session_redis_ssl                      off;
    set $session_redis_ssl_verify               off;
    set $session_redis_server_name              example.com; # for TLS SNI
    set $session_redis_username                 username;
    set $session_redis_password                 password;
    set $session_redis_uselocking               on;
    set $session_redis_spinlockwait             150;  # (in milliseconds)
    set $session_redis_maxlockwait              30;   # (in seconds)
    set $session_redis_pool_name                sessions;
    set $session_redis_pool_timeout             1000; # (in milliseconds)
    set $session_redis_pool_size                10;
    set $session_redis_pool_backlog             10;
    set $session_redis_cluster_name             redis-cluster;
    set $session_redis_cluster_dict             sessions;
    set $session_redis_cluster_maxredirections  5;
    set $session_redis_cluster_nodes            '$GCP_REDIS_BACKEND';

     location /run {
         access_by_lua_block {

             local opts {
                redirect_uri = "https://MY_HOST_NAME/redirect_uri",
                discovery = "https://accounts.google.com/.well-known/openid-configuration",
                
                client_id = "<client_id>",
                client_secret = "<client_secret>",
                
                renew_access_token_on_expiry = true,
                access_token_expires_in = 3600,
                
             }

            -- Check ACCESSTOKEN cookie present
            local access_token = ngx.var.cookie_ACCESSTOKEN
            -- Fallback to Bearer token
            if access_token == nil then
                local auth_header = ngx.req.get_headers()["Authorization"]
                if auth_header ~= nil then
                    _, _, access_token = auth_header:find("Bearer%s+(.+)")
                end
            end

            -- call authenticate for OpenID Connect user authentication
            local res, err = require("resty.openidc").authenticate(opts)

            if err then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            -- if the user is authenticated, then set a cookie and session
            local session = require "resty.session".open()
            if session.data.token == nil or session.data.token == '' then
                ngx.req.set_header("session_token_nil", "true")
                local http = require "resty.http"
                local httpc = http.new()

                local res, err = httpc:request_uri("http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=httpbin-private-aruznp6o4a-ew.a.run.app", { 
                    method = "GET",
                    headers = {
                        ["Metadata-Flavor"] = "Google",
                    }
                })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    return
                end
                
                session.data.token = "" .. res.body
                session:save()
            end

            ngx.req.set_header("Authorization", "Bearer " .. session.data.token)

            local cookie_value = ngx.var.cookie_Auth
            if cookie_value == nil or cookie_value == '' then
                ngx.header['Set-Cookie'] = 'auth=' .. session.data.token
                ngx.req.set_header("session_cookie_nil", "true")
            end
         }

         proxy_set_header X-Real-IP $remote_addr;
         proxy_pass https://httpbin-private-aruznp6o4a-ew.a.run.app/headers;
    }

    location /anonymous { 
         # Anonymous access
         access_by_lua_block {
             local upstreamtoken = ngx.location.capture('/token').body
             ngx.req.set_header("Authorization", "Bearer " .. upstreamtoken)
         }

         proxy_set_header X-Real-IP $remote_addr;
         proxy_pass https://httpbin-private-aruznp6o4a-ew.a.run.app/headers;
    }

    location /token {
        internal; # Security! don't expose to outside world!
        # Avoid requesting a token every inbound request through caching
        proxy_cache tokens;
        proxy_cache_valid 200 5m; # 5 min cache of token
        proxy_set_header Metadata-Flavor "Google";
        proxy_pass http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=httpbin-private-aruznp6o4a-ew.a.run.app;
    }

     location /test {

         access_by_lua_block {

            local session = require "resty.session".open()
            if session.data.token == nil then
                session.data.token = "test_session"
                session:save()
            end

            local cookie_value = ngx.var.cookie_Test
            if cookie_value == nil or cookie_value == '' then 
                ngx.header['Set-Cookie'] = 'test=ok; path=/'
                ngx.req.set_header("Authorization", "Bearer ZHVtbXkK")
                ngx.req.set_header("session_cookie_nil", "true")
            end

            ngx.req.set_header("session_header", "value " .. session.data.token)
            ngx.req.set_header("session_header2", "dummy")
         }
         
         proxy_pass https://httpbin-public-aruznp6o4a-uc.a.run.app/headers;
     }


}
